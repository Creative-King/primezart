"use client"

import type React from "react"

import { useState } from "react"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { ArrowRight, Lock, Mail, Eye, EyeOff } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Checkbox } from "@/components/ui/checkbox"

export default function LoginPage() {
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState("")
  const [showPassword, setShowPassword] = useState(false)
  const [rememberMe, setRememberMe] = useState(false)
  const router = useRouter()

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError("")

    // Simple validation
    if (!email || !password) {
      setError("Please enter both email and password")
      setLoading(false)
      return
    }

    // Simulate authentication (in a real app, this would be an API call)
    setTimeout(() => {
      // For demo purposes, accept any credentials
      // In a real app, you would validate against your backend

      // Store user info in localStorage to simulate a session
      localStorage.setItem("isLoggedIn", "true")
      localStorage.setItem("userEmail", email)

      // Check if this user has recently enrolled
      const enrolledAccountType = localStorage.getItem("enrolledAccountType")

      if (enrolledAccountType) {
        // Map account types to account IDs
        const accountMapping: Record<string, string> = {
          checking: "checking-123",
          savings: "savings-456",
          business: "business-789",
          investment: "investment-101",
          retirement: "retirement-202",
        }

        const accountId = accountMapping[enrolledAccountType] || "checking-123"

        // Clear the enrollment info since we're handling it now
        localStorage.removeItem("enrolledAccountType")

        // Redirect to the specific account page
        router.push(`/dashboard/accounts/${accountId}`)
      } else {
        // Regular login - go to dashboard
        router.push("/dashboard")
      }

      setLoading(false)
    }, 1000)
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-[#0f172a] p-4">
      <div className="w-full max-w-md">
        <div className="text-center mb-8">
          <Link href="/" className="inline-block">
            <div className="text-3xl font-bold">
              <span className="text-gray-900 dark:text-white">Primez</span>
              <span className="sky-gold-text">art</span>
            </div>
          </Link>
          <p className="mt-2 text-gray-600 dark:text-gray-400">The Art of Banking</p>
        </div>

        <Card className="w-full shadow-lg border-0">
          <CardHeader className="space-y-1 bg-[#003366] text-white rounded-t-lg">
            <CardTitle className="text-2xl">Login</CardTitle>
            <CardDescription className="text-gray-200">Access your Primezart account</CardDescription>
          </CardHeader>
          <CardContent className="pt-6">
            <form onSubmit={handleSubmit}>
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <div className="relative">
                    <Mail className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                    <Input
                      id="email"
                      placeholder="name@example.com"
                      type="email"
                      className="pl-10"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                    />
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="password">Password</Label>
                    <Link href="/forgot-password" className="text-sm text-[#0047ab] hover:text-[#003d91]">
                      Forgot password?
                    </Link>
                  </div>
                  <div className="relative">
                    <Lock className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                    <Input
                      id="password"
                      type={showPassword ? "text" : "password"}
                      className="pl-10 pr-10"
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                    />
                    <button
                      type="button"
                      className="absolute right-3 top-3 text-gray-400 hover:text-gray-600"
                      onClick={() => setShowPassword(!showPassword)}
                    >
                      {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                    </button>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="remember"
                    checked={rememberMe}
                    onCheckedChange={(checked) => setRememberMe(checked as boolean)}
                  />
                  <label
                    htmlFor="remember"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    Remember me
                  </label>
                </div>
                {error && <p className="text-red-500 text-sm">{error}</p>}
                <Button type="submit" className="w-full bg-[#0047ab] hover:bg-[#003d91]" disabled={loading}>
                  {loading ? "Logging in..." : "Login"}
                  {!loading && <ArrowRight className="ml-2 h-4 w-4" />}
                </Button>
              </div>
            </form>
          </CardContent>
          <CardFooter className="flex flex-col space-y-4 border-t pt-4">
            <div className="text-sm text-gray-600 dark:text-gray-400 text-center">
              Don't have an account?{" "}
              <Link href="/enroll" className="text-[#0047ab] hover:text-[#003d91] font-medium">
                Enroll Now
              </Link>
            </div>
            <div className="text-xs text-gray-500 dark:text-gray-500 text-center">
              By logging in, you agree to our{" "}
              <Link href="/terms" className="underline">
                Terms of Service
              </Link>{" "}
              and{" "}
              <Link href="/privacy" className="underline">
                Privacy Policy
              </Link>
            </div>
          </CardFooter>
        </Card>
      </div>
    </div>
  )
}

